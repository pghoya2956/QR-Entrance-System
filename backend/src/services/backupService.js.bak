const cron = require('node-cron');
const path = require('path');
const fs = require('fs').promises;
const { createReadStream, createWriteStream } = require('fs');
const { createGzip } = require('zlib');
const { pipeline } = require('stream').promises;

class BackupService {
  constructor() {
    this.dbService = require('./dbService');
    this.backupDir = path.join(__dirname, '../data/backups');
    this.dbPath = path.join(__dirname, '../data/qr-entrance.db');
    this.isRunning = false;
    this.lastBackupStatus = null;
    this.backupHistory = [];
  }

  async ensureBackupDirectory() {
    try {
      await fs.mkdir(this.backupDir, { recursive: true });
    } catch (error) {
      console.error('백업 디렉토리 생성 오류:', error);
      throw error;
    }
  }

  async createBackup() {
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-').slice(0, 19);
    const backupFileName = `backup-${timestamp}.db`;
    const backupPath = path.join(this.backupDir, backupFileName);
    const gzipPath = `${backupPath}.gz`;

    try {
      console.log(`🔄 백업 시작: ${backupFileName}`);
      
      // SQLite 백업 API 사용
      await this.dbService.backup(backupPath);
      
      // 백업 파일 압축
      console.log('📦 백업 파일 압축 중...');
      await pipeline(
        createReadStream(backupPath),
        createGzip({ level: 9 }),
        createWriteStream(gzipPath)
      );
      
      // 원본 백업 파일 삭제 (압축 파일만 유지)
      await fs.unlink(backupPath);
      
      // 파일 크기 확인
      const stats = await fs.stat(gzipPath);
      const fileSizeInMB = (stats.size / (1024 * 1024)).toFixed(2);
      
      // 백업 기록 저장
      const backupRecord = {
        time: new Date().toISOString(),
        filePath: gzipPath,
        fileSize: stats.size,
        sizeInMB: fileSizeInMB,
        status: 'success'
      };
      
      this.backupHistory.push(backupRecord);
      this.lastBackupStatus = backupRecord;
      
      // 데이터베이스에 백업 기록 저장
      await this.saveBackupRecord(backupRecord);
      
      console.log(`✅ 백업 완료: ${backupFileName}.gz (${fileSizeInMB} MB)`);
      
      // 오래된 백업 삭제
      await this.cleanOldBackups();
      
      return backupRecord;
      
    } catch (error) {
      console.error('❌ 백업 실패:', error);
      
      const failureRecord = {
        time: new Date().toISOString(),
        filePath: gzipPath,
        status: 'failed',
        error: error.message
      };
      
      this.backupHistory.push(failureRecord);
      this.lastBackupStatus = failureRecord;
      
      // 실패 기록도 저장
      await this.saveBackupRecord(failureRecord);
      
      throw error;
    }
  }

  async saveBackupRecord(record) {
    try {
      const db = this.dbService.db;
      const stmt = db.prepare(`
        INSERT INTO backup_history (backup_time, file_path, file_size, status, error_message)
        VALUES (?, ?, ?, ?, ?)
      `);
      
      stmt.run(
        record.time,
        record.filePath,
        record.fileSize || null,
        record.status,
        record.error || null
      );
    } catch (error) {
      console.error('백업 기록 저장 오류:', error);
    }
  }

  async cleanOldBackups() {
    try {
      const files = await fs.readdir(this.backupDir);
      const backupFiles = files.filter(f => f.startsWith('backup-') && f.endsWith('.db.gz'));
      
      // 날짜순 정렬 (최신순)
      backupFiles.sort().reverse();
      
      // 30일 이상 된 백업 파일 삭제
      const thirtyDaysAgo = new Date();
      thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
      
      for (const file of backupFiles) {
        // 파일명에서 날짜 추출 (backup-YYYY-MM-DD-HH-mm-ss.db.gz)
        const dateMatch = file.match(/backup-(\d{4}-\d{2}-\d{2})/);
        if (dateMatch) {
          const fileDate = new Date(dateMatch[1]);
          
          if (fileDate < thirtyDaysAgo) {
            const filePath = path.join(this.backupDir, file);
            await fs.unlink(filePath);
            console.log(`🗑️  오래된 백업 삭제: ${file}`);
          }
        }
      }
      
      // 최근 30개만 유지 (추가 안전장치)
      if (backupFiles.length > 30) {
        const filesToDelete = backupFiles.slice(30);
        for (const file of filesToDelete) {
          const filePath = path.join(this.backupDir, file);
          await fs.unlink(filePath);
          console.log(`🗑️  초과 백업 삭제: ${file}`);
        }
      }
      
    } catch (error) {
      console.error('오래된 백업 정리 오류:', error);
    }
  }

  async restoreBackup(backupFileName) {
    const backupPath = path.join(this.backupDir, backupFileName);
    
    try {
      // .gz 파일인 경우 압축 해제
      if (backupFileName.endsWith('.gz')) {
        const tempPath = backupPath.replace('.gz', '');
        
        await pipeline(
          createReadStream(backupPath),
          createGunzip(),
          createWriteStream(tempPath)
        );
        
        // 현재 DB 백업
        const currentBackup = path.join(this.backupDir, `before-restore-${Date.now()}.db`);
        await fs.copyFile(this.dbPath, currentBackup);
        
        // 복원
        await fs.copyFile(tempPath, this.dbPath);
        
        // 임시 파일 삭제
        await fs.unlink(tempPath);
        
        console.log(`✅ 백업 복원 완료: ${backupFileName}`);
      }
    } catch (error) {
      console.error('백업 복원 오류:', error);
      throw error;
    }
  }

  start() {
    if (this.isRunning) {
      console.log('⚠️  백업 서비스가 이미 실행 중입니다.');
      return;
    }

    // 백업 디렉토리 확인
    this.ensureBackupDirectory().then(() => {
      // 매일 새벽 2시에 백업 실행
      this.cronJob = cron.schedule('0 2 * * *', async () => {
        console.log('⏰ 예약된 백업 작업 시작...');
        try {
          await this.createBackup();
        } catch (error) {
          console.error('예약된 백업 실패:', error);
        }
      });

      this.isRunning = true;
      console.log('✅ 백업 서비스 시작됨 (매일 새벽 2시 실행)');
      
      // 시작 시 즉시 백업 (선택사항)
      if (process.env.BACKUP_ON_START === 'true') {
        console.log('🚀 초기 백업 실행...');
        this.createBackup().catch(console.error);
      }
    }).catch(error => {
      console.error('백업 서비스 시작 실패:', error);
    });
  }

  stop() {
    if (this.cronJob) {
      this.cronJob.stop();
      this.isRunning = false;
      console.log('⏹️  백업 서비스 중지됨');
    }
  }

  // 백업 상태 조회
  getStatus() {
    return {
      isRunning: this.isRunning,
      lastBackup: this.lastBackupStatus,
      recentBackups: this.backupHistory.slice(-10), // 최근 10개
      nextBackup: this.isRunning ? '매일 새벽 2시' : null
    };
  }

  // 백업 목록 조회
  async listBackups() {
    try {
      const files = await fs.readdir(this.backupDir);
      const backupFiles = files.filter(f => f.startsWith('backup-') && f.endsWith('.db.gz'));
      
      const backups = await Promise.all(
        backupFiles.map(async (file) => {
          const filePath = path.join(this.backupDir, file);
          const stats = await fs.stat(filePath);
          
          return {
            fileName: file,
            size: stats.size,
            sizeInMB: (stats.size / (1024 * 1024)).toFixed(2),
            created: stats.mtime
          };
        })
      );
      
      // 최신순 정렬
      backups.sort((a, b) => b.created - a.created);
      
      return backups;
    } catch (error) {
      console.error('백업 목록 조회 오류:', error);
      return [];
    }
  }
}

module.exports = new BackupService();